#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('enghelper:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var clients = [];

var WebSocketServer = require('ws').Server;
var wss = new WebSocketServer({server: server});
wss.on('connection', function(socket){
  var connection = socket;
  //var connection = socket.accept('', socket.origin);
  clients.push(connection);
  console.log('Connected ' + connection.upgradeReq.headers.origin);

  connection.on('message', function (message) {

    console.info(message);

    var data = JSON.parse(message);

    switch (data.header) {
      case 'message':
        sendMessageAllClients(message, false);
        break;
      case 'updateUsers':
        clients[clients.indexOf(connection)].chatUserName = data.user;
        updateUsersList();
        break;

    }

    console.log('Received: header-' + data.header + ', user-' + data.user + ', message-' + data.message);
  });
  connection.on('close', function (reasonCode, description) {
    console.log('Disconnected ' + connection.upgradeReq.headers.host);

    var clientId = clients.indexOf(connection);
    if (clientId != -1) {
      clients.splice(clientId, 1);
    }

    updateUsersList();
  });

  function updateUsersList() {
    var chatUsers = [];

    clients.forEach(function (client) {
      chatUsers.push(client.chatUserName);
    });

    data = {
      header: 'updateUsers',
      users: chatUsers
    };

    sendMessageAllClients(JSON.stringify(data), true);
  }

  function sendMessageAllClients(data, ignoreCurrent) {
    clients.forEach(function (client) {
      if (ignoreCurrent || connection !== client) {
        client.send(data);
      }
    });
  }
});